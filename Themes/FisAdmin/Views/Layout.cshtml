@using OrchardCore.DisplayManagement
@using OrchardCore.DisplayManagement.ModelBinding
@using OrchardCore.Users.Models

@inject DarkModeService DarkModeService
@inject IDisplayManager<UserMenu> DisplayManager
@inject IUpdateModelAccessor UpdateModelAccessor
@{
    var adminSettings = Site.As<AdminSettings>();
    var darkMode = await DarkModeService.IsDarkModeAsync();

    // Branding is pre-rendered to allow resource injection
    var brandingHtml = await DisplayAsync(await New.AdminBranding());
}
<!DOCTYPE html>
<html lang="@Orchard.CultureName()" dir="@Orchard.CultureDir()" data-tenant="@DarkModeService.CurrentTenant" data-theme="@DarkModeService.CurrentTheme" data-darkmode="@adminSettings.DisplayDarkMode">
<head>
    <title>@RenderTitleSegments(Site.SiteName, "before")</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">

    <!-- Bootstrap CSS -->
    <style media="all" asp-name="admin" version="1"></style>
    <style media="all" asp-name="admin-fis" version="1"></style>
    <style asp-name="material-icons" version="1"></style>

    <script asp-name="font-awesome" at="Head" version="6"></script>
    <script asp-name="font-awesome-v4-shims" at="Head" version="6"></script>
    <script asp-name="js-cookie" at="Foot"></script>
    <script asp-name="admin" version="1" at="Foot"></script>
    <resources type="Header" />

    <!-- This script can't wait till the footer -->
    <script asp-name="admin-head" version="1"></script>
    @await RenderSectionAsync("HeadMeta", required: false)
</head>
<body class="preload">
    <div class="ta-wrapper">
        <div class="ta-navbar-top navbar-expand-lg bg-primary">
            <div class="d-flex w-100 justify-content-between align-items-center">
                <div class="brand-wrapper">
                    <div class="d-flex w-100 justify-content-between align-items-center">
                        @brandingHtml

                        @if (adminSettings.DisplayTitlesInTopbar)
                        {
                            <div class="brand-wrapper-title">
                                @await RenderSectionAsync("Title", required: false)
                            </div>
                        }
                    </div>
                </div>
                <div class="d-flex align-items-end pe-md-3">
                    <ul class="nav navbar user-top-navbar">
                        @await RenderSectionAsync("NavbarTop", required: false)
                        @if (adminSettings.DisplayDarkMode)
                        {
                            <li class="nav-item">
                                <a id="btn-darkmode" class="nav-link" data-bs-toggle="tooltip" data-bs-placement="bottom" title="@(darkMode ? T["Light mode"] : T["Dark mode"])" role="button">
                                    @if (darkMode)
                                    {
                                        <i class="fa-solid fa-sun" aria-hidden="true"></i>
                                        <span class="d-none">@T["Light mode"]</span>
                                    }
                                    else
                                    {
                                        <i class="fa-solid fa-moon" aria-hidden="true"></i>
                                        <span class="d-none">@T["Dark mode"]</span>
                                    }
                                </a>
                            </li>
                        }
                        <li class="nav-item">
                            <a href="@Url.Content("~/")" class="nav-link" target="_blank" data-bs-toggle="tooltip" data-bs-placement="bottom" title="@T["Visit Site"]" role="button">
                                <i class="fa-solid fa-fw fa-external-link" aria-hidden="true"></i>
                            </a>
                        </li>
                        <li class="nav-item">
                            @await DisplayAsync(await DisplayManager.BuildDisplayAsync(new UserMenu(), UpdateModelAccessor.ModelUpdater, "DetailAdmin"))
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div id="ta-left-sidebar" class="d-flex flex-column justify-content-between align-items-stretch">
            @await RenderSectionAsync("Navigation", required: false)
            <div class="footer">
                <button type="button" class="leftbar-compactor" title="@T["Collapse / expand menu"]">
                    <span class="d-none">@T["Collapse / expand menu"]</span>
                </button>
            </div>
        </div>

        <div class="ta-content">
            @await RenderSectionAsync("Header", required: false)
            @await RenderSectionAsync("Messages", required: false)
            @await RenderSectionAsync("Breadcrumbs", required: false)
            @if (!adminSettings.DisplayTitlesInTopbar)
            {
                @await RenderSectionAsync("Title", required: false)
            }
            @await RenderBodyAsync()
        </div>

        @await RenderSectionAsync("Footer", required: false)

    </div>
    <div id="confirmRemoveModalMetadata" data-title="@T["Delete"]" data-message="@T["Are you sure you want to remove this element?"]" data-ok-text="@T["Ok"]" data-cancel-text="@T["Cancel"]" data-ok-class="btn-danger" data-cancel-class="btn-secondary"></div>
    <resources type="Footer" />

    <script src="https://code.jquery.com/jquery-3.7.1.slim.min.js" integrity="sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8=" crossorigin="anonymous"></script>
    <script type="text/javascript">

        if (!String.prototype.startsWith) {
            String.prototype.startsWith = function (searchString, position) {
                position = position || 0;
                return this.substr(position, searchString.length) === searchString;
            };
        }

        $(function () {

            var wintimeout;

            function SetWinTimeout() {
                wintimeout = window.setTimeout("window.location.href='/Admin';", 20 * 60000); // In millisecods
                return false;
            }

            $('body *').on("click", function () {
                window.clearTimeout(wintimeout);
                SetWinTimeout();
            });

            $('body *').on("focus", function () {
                window.clearTimeout(wintimeout);
                SetWinTimeout();
            });

            SetWinTimeout();

            $('a.editLink').on('click', function () {
                $('input, textarea', $(this).parent().parent()).removeAttr('disabled');
            });

            $("[togglelink]").each(function (index, el) {
                $(this).click(function () {
                    $("[toggleContainer='" + $(this).attr('toggleLink') + "']").slideToggle('slow');
                })
            })

            $("[toggleContainer='newUser'] div.validation-summary-valid > span").parent().parent().parent().show();

        });

    </script>


</body>
</html>
